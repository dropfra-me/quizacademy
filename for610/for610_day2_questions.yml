# FOR610 Training Day 2 Questions
metadata:
  title: "FOR610 Day 2 Practice Questions"
  created_by: "LLM Assistant"
  content_source: "FOR610 Training Materials Day 2"
  question_count: 30

questions:
- category: "Reversing Malicious Code"
  type: "multiple_choice"
  question: "What is the primary benefit of using a decompiler, such as the one in Ghidra, to analyze malicious code?"
  options:
  - "It allows the code to be executed safely in a sandbox environment."
  - "It produces a C representation of the code, which accelerates understanding."
  - "It provides a comprehensive list of all imported and exported functions without further analysis."
  - "It ensures the code is free of any obfuscation or self-modifying properties."
  correct_answer: "It produces a C representation of the code, which accelerates understanding."
  explanation: "Ghidra's decompiler produces a C representation of the assembly, which can greatly accelerate an analyst's understanding of the code's functionality."
- category: "Reversing Malicious Code"
  type: "multiple_choice"
  question: "When analyzing a Windows executable in Ghidra, what is the significance of the '.text' section?"
  options:
  - "It contains the program's configuration data and embedded strings."
  - "It contains the program's executable code."
  - "It lists the required DLLs and API functions."
  - "It holds the program's read-only data."
  correct_answer: "It contains the program's executable code."
  explanation: "The '.text' section of a Portable Executable (PE) file, as seen in Ghidra, is where the program's executable code is located."
- category: "Reversing Malicious Code"
  type: "multiple_choice"
  question: "In x86 assembly, what does the instruction `MOV EAX, [0x410230]` do?"
  options:
  - "It moves the immediate value `0x410230` into the `EAX` register."
  - "It moves the 4 bytes of data located at the memory address `0x410230` into the `EAX` register."
  - "It jumps to the memory address `0x410230`."
  - "It places the address of `EAX` into the memory location `0x410230`."
  correct_answer: "It moves the 4 bytes of data located at the memory address `0x410230` into the `EAX` register."
  explanation: "The brackets `[]` around a memory address in an assembly instruction indicate that the instruction is fetching data from that address, a process known as dereferencing."
- category: "Reversing Malicious Code"
  type: "multiple_choice"
  question: "What is the primary difference in dynamic analysis between a DLL and an EXE file?"
  options:
  - "A DLL can run on its own, while an EXE requires a loader."
  - "A DLL typically has a single entry point, while an EXE has multiple exports."
  - "A DLL needs another program to load it into memory to execute, while an EXE can run on its own."
  - "A DLL only works on 64-bit systems, while an EXE can run on both 32-bit and 64-bit."
  correct_answer: "A DLL needs another program to load it into memory to execute, while an EXE can run on its own."
  explanation: "Dynamically, an EXE can run by itself, but a DLL file requires another executable (like `rundll32.exe`) to load it into memory to function."
- category: "Reversing Malicious Code"
  type: "multiple_choice"
  question: "Which of the following describes the function of the `PUSH` instruction when it appears directly before a `CALL` instruction?"
  options:
  - "It pushes the return value of the function onto the stack."
  - "It often represents the arguments being passed to the called function."
  - "It stores the address of the next instruction to execute."
  - "It marks the end of the function's prologue."
  correct_answer: "It often represents the arguments being passed to the called function."
  explanation: "When a `CALL` instruction is executed, a `PUSH` instruction that precedes it often represents an argument being passed to the called function."
- category: "Reversing Malicious Code"
  type: "multiple_choice"
  question: "What is a 'dropper' in the context of malware analysis?"
  options:
  - "A type of malware that specifically targets cloud storage environments."
  - "Malware that embeds a separate malicious executable within its own resources and writes it to disk."
  - "Malware that drops its network connection and stops communicating with its C2 server."
  - "A tool used by analysts to drop breakpoints into a debugger."
  correct_answer: "Malware that embeds a separate malicious executable within its own resources and writes it to disk."
  explanation: "Malware that drops files by embedding them in its resource section is called a dropper."
- category: "Reversing Malicious Code"
  type: "multiple_choice"
  question: "When using Ghidra to analyze a function, what does the Function Graph view primarily assist with?"
  options:
  - "Editing the label for a function."
  - "Visualizing the program's overall control flow and structure, especially loops and conditionals."
  - "Viewing a list of all imported API calls in a program."
  - "Displaying the raw hexadecimal values of the executable."
  correct_answer: "Visualizing the program's overall control flow and structure, especially loops and conditionals."
  explanation: "The Function Graph view is an alternative to the Listing view and is particularly useful for visualizing loops and complex conditional statements within a function."
- category: "Reversing Malicious Code"
  type: "multiple_choice"
  question: "Which register is often used as a counter in x86 assembly, especially for looping operations?"
  options:
  - "EBP"
  - "EAX"
  - "ESP"
  - "ECX"
  correct_answer: "ECX"
  explanation: "The ECX register is commonly used as a counter for looping."
- category: "Reversing Malicious Code"
  type: "multiple_choice"
  question: "What is the purpose of the `EIP` register in the x86 architecture?"
  options:
  - "It holds the return value of a function."
  - "It points to the next instruction to be executed."
  - "It is used for addition and multiplication."
  - "It points to the last item on the stack."
  correct_answer: "It points to the next instruction to be executed."
  explanation: "The EIP (Instruction Pointer) register contains the address of the next instruction that the CPU will execute."
- category: "Reversing Malicious Code"
  type: "multiple_choice"
  question: "In the context of the Portable Executable (PE) file format, what does the `MZ` string at the beginning of the file represent?"
  options:
  - "The file's entry point address."
  - "A magic number that identifies the file as a Windows executable."
  - "The location of the import address table (IAT)."
  - "A reference to a memory-mapped section."
  correct_answer: "A magic number that identifies the file as a Windows executable."
  explanation: "The characters 'MZ' at the beginning of a Windows executable are a 'magic number' that identifies the file format."
- category: "Reversing Malicious Code"
  type: "multiple_choice"
  question: "What is the primary disadvantage of indirect memory addressing during static code analysis?"
  options:
  - "It requires the use of multiple registers simultaneously."
  - "It is impossible to determine the value of a calculated address without executing the code."
  - "The registers used are not populated with values until runtime."
  - "It can only be used with 64-bit architectures, not 32-bit."
  correct_answer: "The registers used are not populated with values until runtime."
  explanation: "Indirect memory addressing can be challenging for static analysis because the registers that hold the addresses are not populated until the program is running, making it difficult to determine the effective address."
- category: "Reversing Malicious Code"
  type: "multiple_choice"
  question: "What is a 'symbol' in Ghidra?"
  options:
  - "An instruction that performs a mathematical operation."
  - "A name associated with a specific memory address."
  - "A custom data structure defined by the analyst."
  - "A type of conditional jump."
  correct_answer: "A name associated with a specific memory address."
  explanation: "A symbol is a name that Ghidra assigns to a memory address, such as a function name or a variable label."
- category: "Reversing Malicious Code"
  type: "multiple_choice"
  question: "Which of the following is a common persistence mechanism that can be identified by examining API calls like `RegOpenKeyExA` and `CreateProcessW`?"
  options:
  - "Encrypting and exfiltrating data to a C2 server."
  - "Modifying the registry to run the malware at startup."
  - "Injecting malicious code into a legitimate process."
  - "Dropping an embedded executable from the resource section."
  correct_answer: "Modifying the registry to run the malware at startup."
  explanation: "Malware often interacts with the registry for persistence. The course material highlights how APIs like `RegOpenKeyEx` are used to open and manipulate registry keys, often to store configuration data or set up auto-start."
- category: "Reversing Malicious Code"
  type: "multiple_choice"
  question: "In the context of malware analysis, what is meant by the 'code-data duality'?"
  options:
  - "The ability of code to run on both 32-bit and 64-bit systems."
  - "The fact that code and data are stored in separate memory segments."
  - "The idea that the same binary sequence can be interpreted as either an instruction or a piece of data, depending on how it's used."
  - "The process of a debugger analyzing both the code and the data in memory simultaneously."
  correct_answer: "The idea that the same binary sequence can be interpreted as either an instruction or a piece of data, depending on how it's used."
  explanation: "The 'code-data duality' refers to the property that the only way to distinguish between code and data is by how the information is used, allowing for self-referencing and self-modifying code."
- category: "Reversing Malicious Code"
  type: "multiple_choice"
  question: "In Ghidra, what is the keyboard shortcut to add a comment to a line of code?"
  options:
  - "Ctrl + C"
  - "Shift + C"
  - "L"
  - "Semicolon (;)"
  correct_answer: "Semicolon (;)"
  explanation: "To add a comment in Ghidra, you select the line of code and press the semicolon key on the keyboard."
- category: "Reversing Malicious Code"
  type: "true_false"
  question: "An effective code analyst must be a professional programmer with extensive experience in all assembly languages."
  correct_answer: false
  explanation: "The material states that you do not need to be a programmer or understand every assembly instruction to perform effective code analysis."
- category: "Reversing Malicious Code"
  type: "true_false"
  question: "Ghidra's decompiler output is always 100% accurate and should be trusted over the disassembled code."
  correct_answer: false
  explanation: "The course material warns that decompiler output is not always complete or accurate, and that a strong foundation in assembly language is critical."
- category: "Reversing Malicious Code"
  type: "true_false"
  question: "In x86 assembly, the destination operand is typically listed second in an instruction."
  correct_answer: false
  explanation: "In the Intel syntax used by this course, the destination operand is always listed first."
- category: "Reversing Malicious Code"
  type: "true_false"
  question: "The `dword` data type is defined to be four times the size of a standard word, or 64 bits."
  correct_answer: false
  explanation: "A `dword` (double word) is defined as twice the size of a word, which is practically 32 bits. A `qword` (quad-word) is 64 bits."
- category: "Reversing Malicious Code"
  type: "true_false"
  question: "A `CALL` instruction is used to call a function, and `PUSH` instructions that precede it often represent the function's arguments."
  correct_answer: true
  explanation: "A `CALL` instruction performs a function call, and the `PUSH` instructions that appear before it often represent the arguments passed to that function."
- category: "Reversing Malicious Code"
  type: "true_false"
  question: "The `EBP` register is used to point to the last item on the stack."
  correct_answer: false
  explanation: "The `ESP` register, not `EBP`, is used to point to the last item on the stack."
- category: "Reversing Malicious Code"
  type: "true_false"
  question: "In Ghidra, the `Symbol Tree` window lists a program's imports, exports, and internal functions."
  correct_answer: true
  explanation: "The `Symbol Tree` window in Ghidra is used to list a program's dependencies, exports, and internal functions."
- category: "Reversing Malicious Code"
  type: "true_false"
  question: "The `FindResource` API in Windows is used to locate a resource within an executable, while `WriteFile` is used to execute it."
  correct_answer: false
  explanation: "The `FindResource` API is used to locate a resource, but `WriteFile` is used to write it to disk, not execute it. `CreateProcessW` is the API often used for execution."
- category: "Reversing Malicious Code"
  type: "true_false"
  question: "The `JNE` (jump if not equal) and `JNZ` (jump if not zero) instructions are functionally identical in x86 assembly."
  correct_answer: true
  explanation: "The `JNE` and `JNZ` conditional jumps check the same flag (the zero flag) and are represented by the same opcode, making them functionally identical."
- category: "Reversing Malicious Code"
  type: "true_false"
  question: "Using `Ctrl + Shift + F` is a shortcut in Ghidra to find all references to a selected item, such as a string or a function."
  correct_answer: true
  explanation: "The shortcut `Ctrl + Shift + F` is used to find all references to a symbol, like a string."
- category: "Reversing Malicious Code"
  type: "true_false"
  question: "A `word` is a data type that is always 16 bits, regardless of the processor's architecture."
  correct_answer: false
  explanation: "While many tools and conventions consider a `word` to be 16 bits for backward compatibility, the term is technically the 'natural size' for a processor's unit of data, which can vary."
- category: "Reversing Malicious Code"
  type: "true_false"
  question: "A `pointer` is a variable that contains the address of some location in memory."
  correct_answer: true
  explanation: "The course defines a pointer as 'a variable that contains the address of some location in memory'."
- category: "Reversing Malicious Code"
  type: "true_false"
  question: "In Ghidra, the `perform_http_c2` function name is a name automatically generated by the tool during analysis."
  correct_answer: false
  explanation: "The name `perform_http_c2` is a custom, descriptive name that the analyst applied to the function, replacing Ghidra's auto-generated `FUN_40684c`."
- category: "Reversing Malicious Code"
  type: "true_false"
  question: "The `Symbol References` window in Ghidra can be filtered to show only `Imported` symbols to focus on the program's dependencies."
  correct_answer: true
  explanation: "The `Symbol References` window can be filtered by clicking the gear icon to only display symbols with the 'Imported' source, which helps an analyst focus on dependencies."
- category: "Reversing Malicious Code"
  type: "true_false"
  question: "In the `MOV EAX, 0x6453` instruction, `EAX` is the source and `0x6453` is the destination."
  correct_answer: false
  explanation: "In the Intel syntax, the destination operand is listed first, so `EAX` is the destination and `0x6453` is the source."
