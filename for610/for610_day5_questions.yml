# FOR610 Training Day 5 Questions
metadata:
  title: "FOR610 Day 5 Practice Questions"
  created_by: "LLM Assistant"
  content_source: "FOR610 Training Materials Day 5"
  question_count: 30

questions:
- category: "Examining Self-Defending Malware"
  type: "multiple_choice"
  question: "What is a primary reason for malware to use the `IsDebuggerPresent` API call?"
  options:
  - "To launch an external process."
  - "To download a malicious file from the internet."
  - "To check if it is running inside a debugger and terminate to avoid analysis."
  - "To establish a network connection to a C2 server."
  correct_answer: "To check if it is running inside a debugger and terminate to avoid analysis."
  explanation: "Malware can detect the presence of a debugger by using the `IsDebuggerPresent` API call, which returns a non-zero value if a debugger is attached, and can then terminate its process."
- category: "Examining Self-Defending Malware"
  type: "multiple_choice"
  question: "What is the purpose of patching a `JNE` instruction to `NOP`s in a debugger?"
  options:
  - "To fix a crash in the malicious code."
  - "To change the logic of a conditional jump to bypass a defensive measure."
  - "To prevent the malware from calling a specific API."
  - "To completely remove the jump instruction so it cannot redirect execution, regardless of conditions."
  correct_answer: "To completely remove the jump instruction so it cannot redirect execution, regardless of conditions."
  explanation: "A common approach to bypass a defensive measure is to replace a conditional jump instruction, such as `JNE`, with `NOP` instructions to prevent the jump from ever being taken."
- category: "Examining Self-Defending Malware"
  type: "multiple_choice"
  question: "In x86 assembly, how can malware directly check for a debugger without using an API call like `IsDebuggerPresent`?"
  options:
  - "By checking the `BeingDebugged` field in the Process Environment Block (PEB)."
  - "By examining the size of the `ImageBase` field."
  - "By looking for the `MZ` header."
  - "By searching for the `kernel32.dll` library in memory."
  correct_answer: "By checking the `BeingDebugged` field in the Process Environment Block (PEB)."
  explanation: "Malware can directly check the `BeingDebugged` field, which is at offset 2 in the PEB, to determine if it is being debugged."
- category: "Examining Self-Defending Malware"
  type: "multiple_choice"
  question: "Which of the following is a common method for concealing sensitive strings in malware?"
  options:
  - "Storing the strings in a separate, encrypted file on the disk."
  - "Using a single-byte XOR key to obfuscate each character in the string."
  - "Placing the strings in the `.text` section of the PE header."
  - "Using a `GET` request to retrieve the strings from a legitimate website."
  correct_answer: "Using a single-byte XOR key to obfuscate each character in the string."
  explanation: "Malware authors often obfuscate strings using algorithms like a single-byte XOR key, which is relatively straightforward to implement."
- category: "Examining Self-Defending Malware"
  type: "multiple_choice"
  question: "What is the purpose of the `NtGlobalFlag` check in the PEB for debugger detection?"
  options:
  - "It ensures the program is running on a 64-bit system."
  - "It confirms that the program has the correct version number."
  - "It detects if the process was launched by a debugger."
  - "It verifies that the program is not a virus."
  correct_answer: "It detects if the process was launched by a debugger."
  explanation: "The `NtGlobalFlag` field in the PEB normally contains a value of zero, but when a debugger launches a process, it sets specific flags (totaling 0x70) that malware can check for."
- category: "Examining Self-Defending Malware"
  type: "multiple_choice"
  question: "What is the `ScyllaHide` plugin for x64dbg/x32dbg used for?"
  options:
  - "To automatically unpack a packed executable."
  - "To scan a file for common malware strings."
  - "To automatically conceal the debugger from common detection techniques."
  - "To rebuild the Import Address Table of a dumped process."
  correct_answer: "To automatically conceal the debugger from common detection techniques."
  explanation: "ScyllaHide is a plugin that provides an easy way to cloak the debugger from many of the common defensive measures malware authors employ."
- category: "Examining Self-Defending Malware"
  type: "multiple_choice"
  question: "What is a 'stack string'?"
  options:
  - "A string that is stored in the `.data` section of a PE file."
  - "A string that is built dynamically at runtime, one character at a time, to evade static analysis."
  - "A special type of string that can only be found with the `strings` tool."
  - "A string that is encrypted and stored on the heap."
  correct_answer: "A string that is built dynamically at runtime, one character at a time, to evade static analysis."
  explanation: "The stack string technique breaks a string into individual characters and dynamically builds the string during runtime to make it difficult for traditional string-extracting tools to find."
- category: "Examining Self-Defending Malware"
  type: "multiple_choice"
  question: "Which Windows API call is often used by malware to launch a child process in a suspended state for process hollowing?"
  options:
  - "`CreateProcessA`"
  - "`ResumeThread`"
  - "`GetTickCount`"
  - "`VirtualAllocEx`"
  correct_answer: "`CreateProcessA`"
  explanation: "The `CreateProcess` API, especially when used with a `CREATE_SUSPENDED` flag, is a key component of process hollowing, allowing the malware to modify the child process before it begins execution."
- category: "Examining Self-Defending Malware"
  type: "multiple_choice"
  question: "What is the purpose of the `brxor.py` tool?"
  options:
  - "To search for and decode XOR-encoded strings that contain English words without needing a known substring."
  - "To dump a process from memory."
  - "To find all API calls in an executable file."
  - "To create a `PE` header from a raw dump file."
  correct_answer: "To search for and decode XOR-encoded strings that contain English words without needing a known substring."
  explanation: "The `brxor.py` tool attempts to automatically decode bytes using a 1-byte XOR key and looks for the resulting ASCII strings that contain words from the English language."
- category: "Examining Self-Defending Malware"
  type: "multiple_choice"
  question: "What is `process hollowing`?"
  options:
  - "A technique for creating an empty process without any code."
  - "A technique where malware replaces the legitimate code of a suspended child process with its own malicious code."
  - "A method for protecting a process from being terminated by the user."
  - "A way to inject shellcode into a web browser's process."
  correct_answer: "A technique where malware replaces the legitimate code of a suspended child process with its own malicious code."
  explanation: "Process hollowing is a code injection technique where a suspended legitimate process is 'hollowed out' by unmapping its memory sections, and then a malicious payload is written and executed in its place."
- category: "Examining Self-Defending Malware"
  type: "multiple_choice"
  question: "Malware can detect if it is running too slowly, possibly due to single-stepping in a debugger, by using which type of API call?"
  options:
  - "`ReadProcessMemory`"
  - "`FindWindowA`"
  - "`GetTickCount`"
  - "`ResumeThread`"
  correct_answer: "`GetTickCount`"
  explanation: "The `GetTickCount` API can be used by malware to check how much time has passed between two points in its execution. If it runs too slowly, it might assume it is being debugged."
- category: "Examining Self-Defending Malware"
  type: "multiple_choice"
  question: "What tool can be used to scan a file for XOR-encoded strings if you have a known substring to search for?"
  options:
  - "`bbcrack`"
  - "`strings`"
  - "`XORSearch`"
  - "`PeStudio`"
  correct_answer: "`XORSearch`"
  explanation: "The `XORSearch` tool can be used to scan a file for the obfuscated version of a known substring, revealing the XOR key and the full decoded string."
- category: "Examining Self-Defending Malware"
  type: "multiple_choice"
  question: "Which of the following is NOT a technique malware uses to detect virtual machines or sandboxes?"
  options:
  - "Checking for specific registry keys created by virtualization software."
  - "Looking for a high-entropy file section."
  - "Checking for a low disk capacity."
  - "Attempting to locate a window title that is a known analysis tool."
  correct_answer: "Looking for a high-entropy file section."
  explanation: "High entropy is an indicator of a packed or encrypted file, not a method for detecting a virtual machine or sandbox."
- category: "Examining Self-Defending Malware"
  type: "multiple_choice"
  question: "In the context of process hollowing, which API is often used to replace the memory of the child process with malicious code?"
  options:
  - "`VirtualAllocEx`"
  - "`CreateProcessA`"
  - "`WriteProcessMemory`"
  - "`ResumeThread`"
  correct_answer: "`WriteProcessMemory`"
  explanation: "`WriteProcessMemory` is a key API call in the process hollowing technique, used to write the malicious payload into the address space of the target process."
- category: "Examining Self-Defending Malware"
  type: "multiple_choice"
  question: "Why might a malware author intentionally cause a crash if a breakpoint is set on `LoadLibraryA`?"
  options:
  - "To trick the analyst into thinking the program is benign."
  - "To prevent the next stage of the malware from loading."
  - "To detect that an analyst is attempting to bypass its defenses."
  - "To avoid having to dynamically resolve API calls."
  correct_answer: "To detect that an analyst is attempting to bypass its defenses."
  explanation: "Some malware authors anticipate that an analyst will set breakpoints on common API calls like `LoadLibraryA` to catch unpacking, and they will purposefully crash if a software breakpoint is detected."
- category: "Examining Self-Defending Malware"
  type: "true_false"
  question: "The `DynamicBase` flag in a PE header must be disabled to ensure that ASLR is active during analysis."
  correct_answer: false
  explanation: "The `DynamicBase` flag enables ASLR, so disabling it actually deactivates ASLR."
- category: "Examining Self-Defending Malware"
  type: "true_false"
  question: "The `NtGlobalFlag` field in the PEB is a reliable way to detect if an analyst attached a debugger to a process after it was already running."
  correct_answer: false
  explanation: "This method only works when the process is launched by the debugger, not when a debugger is attached to an existing process."
- category: "Examining Self-Defending Malware"
  type: "true_false"
  question: "The `GetTickCount` API call is an example of a timing-based anti-analysis measure."
  correct_answer: true
  explanation: "The `GetTickCount` API is used by malware to check if it's running too slowly, which would suggest it's being single-stepped in a debugger."
- category: "Examining Self-Defending Malware"
  type: "true_false"
  question: "Patched code that is saved from a debugger like x64dbg will also be patched when it is run on a different system."
  correct_answer: true
  explanation: "Saving a patched file from a debugger makes the change permanent in the executable file, so the change persists even when the file is moved."
- category: "Examining Self-Defending Malware"
  type: "true_false"
  question: "The `bbcrack` tool is designed to work with all possible obfuscation algorithms."
  correct_answer: false
  explanation: "The tool works with common algorithms like XOR, ROL, and ADD, but not all possible obfuscation techniques."
- category: "Examining Self-Defending Malware"
  type: "true_false"
  question: "Malware can detect if it's running in a VMware virtual machine by checking for a specific string in the registry that identifies the virtual disk."
  correct_answer: true
  explanation: "Malware can use API calls to check for the value 'VMware, VMware Virtual S1.0' in the `HARDWARE\\DEVICEMAP` registry key."
- category: "Examining Self-Defending Malware"
  type: "true_false"
  question: "The `NtUnmapViewOfSection` API is a key indicator of a process hollowing attack."
  correct_answer: true
  explanation: "This API is used by malware to remove the original contents of a suspended child process's memory space, which is the 'hollowing' part of the technique."
- category: "Examining Self-Defending Malware"
  type: "true_false"
  question: "Malware that uses the stack strings technique stores all its strings in a dedicated, unencrypted section of the PE file."
  correct_answer: false
  explanation: "The stack strings technique is a method for concealing strings, and they are not stored in a traditional, dedicated section."
- category: "Examining Self-Defending Malware"
  type: "true_false"
  question: "A hardware breakpoint is generally a more reliable way to detect an access to a memory address than a software breakpoint."
  correct_answer: true
  explanation: "Hardware breakpoints are often more reliable, especially on the stack, than software memory access breakpoints."
- category: "Examining Self-Defending Malware"
  type: "true_false"
  question: "The `DLL characteristics` field in a PE header is used to determine if the executable is a 32-bit or 64-bit program."
  correct_answer: false
  explanation: "The `DllCharacteristics` field controls features like ASLR (`DynamicBase`), not the architecture of the program."
- category: "Examining Self-Defending Malware"
  type: "true_false"
  question: "A malware author might use the `OutputDebugString` API to detect if a debugger is present."
  correct_answer: true
  explanation: "The `OutputDebugString` API can be used to detect the presence of a debugger because its behavior changes depending on whether a debugger is attached."
- category: "Examining Self-Defending Malware"
  type: "true_false"
  question: "The `setdllcharacteristics` tool is used to analyze the entropy of a file."
  correct_answer: false
  explanation: "The `setdllcharacteristics` tool modifies the `DllCharacteristics` field to disable ASLR, while `Bytehist` is a tool for analyzing entropy."
- category: "Examining Self-Defending Malware"
  type: "true_false"
  question: "The `rdtsc` assembly instruction can be used for timing-based debugger detection."
  correct_answer: true
  explanation: "The `rdtsc` (Read Time-Stamp Counter) instruction can be used to measure elapsed time, which is a method for timing-based debugger detection."
- category: "Examining Self-Defending Malware"
  type: "true_false"
  question: "The `VBoxCloak` and `VMwareCloak` scripts are used to create artifacts that make it easier for malware to detect a virtual machine."
  correct_answer: false
  explanation: "These scripts are used to remove registry keys and files that are used by malware to detect the presence of a VM."
- category: "Examining Self-Defending Malware"
  type: "true_false"
  question: "The `MOV` instructions that build a 'stack string' can be easily found with a traditional string extraction tool like `strings`."
  correct_answer: false
  explanation: "Since the string is built dynamically, it is difficult to extract using traditional tools that perform static analysis."
